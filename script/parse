#!/usr/bin/env ruby -s
require 'rubygems'
$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), "..", 'lib')))
require 'rdf/n3'
require 'rdf/ntriples'
require 'getoptlong'

def run(input, base)
  if $parse_only
    include RDF::N3::Meta
    include RDF::N3::Parser
    puts "\nparse #{input.read}---\n\n" unless $quiet
    input.rewind
    if $quiet
      $stdout = StringIO.new
    end
    test(input, BRANCHES, REGEXPS)
    if $quiet
      $stdout = STDOUT
      print "."
    end
  elsif $format == :ntriples || $quiet
    RDF::N3::Reader.new(input, :base_uri => base, :strict => true).each do |statement|
      if $quiet
        print "."
      else
        puts statement.to_ntriples
      end
    end
  elsif $format == :inspect
    RDF::N3::Reader.new(input, :base_uri => base, :strict => true).each do |statement|
      puts statement.inspect
    end
  else
    puts RDF::Writer.for($format.to_sym).buffer(:base_uri => base, :standard_prefixes => true) { |writer|
      RDF::N3::Reader.new(input, :base_uri => base, :strict => true).each do |statement|
        writer << statement
      end
    }
  end
  puts
rescue
  fname = input.respond_to?(:path) ? input.path : "-stdin-"
  STDERR.puts("Error in #{fname}")
  raise
end

case ARGV.shift
when "parse"
  $parse_only = false
when "test"
  $parse_only = true
else
  raise "Mode must be one of 'parse' or 'test'"
end

$verbose = false
$format = :ntriples
base_uri  = "http://example.com"
input = nil

opts = GetoptLong.new(
  ["--debug", GetoptLong::NO_ARGUMENT],
  ["--verbose", GetoptLong::NO_ARGUMENT],
  ["--quiet", GetoptLong::NO_ARGUMENT],
  ["--format", GetoptLong::REQUIRED_ARGUMENT],
  ["--execute", "-e", GetoptLong::REQUIRED_ARGUMENT],
  ["--uri", GetoptLong::REQUIRED_ARGUMENT]
)
opts.each do |opt, arg|
  case opt
  when '--verbose' then $verbose = true
  when '--quiet' then $quiet = true
  when '--debug' then ::RDF::N3::debug = true
  when '--execute' then input = arg
  when '--format' then $format = arg.to_sym
  when '--uri' then base_uri = arg
  end
end

if ARGV.empty?
  s = input ? input : $stdin.read
  run(StringIO.new(s), base_uri)
else
  ARGV.each do |test_file|
    run(File.open(test_file), base_uri)
  end
end
puts