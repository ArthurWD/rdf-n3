{"name":"Rdf-n3","tagline":"Ruby Notation-3 reader/writer for RDF.rb.","body":"# RDF::N3 reader/writer\r\nNotation-3 reader/writer for [RDF.rb][RDF.rb] .\r\n\r\n[![Gem Version](https://badge.fury.io/rb/rdf-n3.png)](http://badge.fury.io/rb/rdf-n3)\r\n[![Build Status](https://travis-ci.org/ruby-rdf/rdf-n3.png?branch=master)](http://travis-ci.org/ruby-rdf/rdf-n3)\r\n\r\n## Description\r\nRDF::N3 is an Notation-3 parser for Ruby using the [RDF.rb][RDF.rb]  library suite.\r\n\r\nReader inspired from TimBL predictiveParser and Python librdf implementation.\r\n\r\n## Turtle deprecated\r\nSupport for Turtle mime-types and specific format support has been deprecated from this gem,\r\nas Turtle is now implemented using [RDF::Turtle][RDF::Turtle].\r\n\r\n## Features\r\nRDF::N3 parses [Notation-3][N3], [Turtle][Turtle] and [N-Triples][N-Triples] into statements or triples. It also serializes to Turtle.\r\n\r\nInstall with `gem install rdf-n3`\r\n\r\n## Limitations\r\n* Full support of Unicode input requires Ruby version 1.9 or greater.\r\n* Support for Variables in Formulae dependent on underlying repository. Existential variables are quantified to RDF::Node instances, Universals to RDF::Query::Variable, with the URI of the variable target used as the variable name.\r\n* No support for N3 Reification. If there were, it would be through a :reify option to the reader.\r\n\r\n## Usage\r\nInstantiate a reader from a local file:\r\n\r\n    RDF::N3::Reader.open(\"etc/foaf.n3\") do |reader|\r\n       reader.each_statement do |statement|\r\n         puts statement.inspect\r\n       end\r\n    end\r\n\r\nDefine `@base` and `@prefix` definitions, and use for serialization using `:base_uri` an `:prefixes` options\r\n\r\nWrite a graph to a file:\r\n\r\n    RDF::N3::Writer.open(\"etc/test.n3\") do |writer|\r\n       writer << graph\r\n    end\r\n\r\n### Formulae\r\nN3 Formulae are introduced with the { statement-list } syntax. A given formula is assigned an RDF::Node instance, which is also used as the context for RDF::Statement instances provided to RDF::N3::Reader#each_statement. For example, the following N3 generates the associated statements:\r\n\r\n    { [ x:firstname  \"Ora\" ] dc:wrote [ dc:title  \"Moby Dick\" ] } a n3:falsehood .\r\n  \r\nresults in\r\n\r\n    f = RDF::Node.new\r\n    s = RDF::Node.new\r\n    o = RDF::Node.new\r\n    RDF::Statement(f, rdf:type n3:falsehood)\r\n    RDF::Statement(s, x:firstname, \"Ora\", :context => f)\r\n    RDF::Statement(s, dc:wrote, o, :context => f)\r\n    RDF::Statement(o, dc:title, \"Moby Dick\", :context => f)\r\n\r\n### Variables\r\nN3 Variables are introduced with @forAll, @forEach, or ?x. Variables reference URIs described in formulae, typically defined in the default vocabulary (e.g., \":x\"). Existential variables are replaced with an allocated RDF::Node instance. Universal variables are replaced with a RDF::Query::Variable instance. For example, the following N3 generates the associated statements:\r\n\r\n    @forAll <#h>. @forSome <#g>. <#g> <#loves> <#h> .\r\n\r\nresults in:\r\n\r\n    h = RDF::Query::Variable.new(<#h>)\r\n    g = RDF::Node.new()\r\n    RDF::Statement.new(f, <#loves>, h)\r\n\r\n## Implementation Notes\r\nThe parser is driven through a rules table contained in lib/rdf/n3/reader/meta.rb. This includes\r\nbranch rules to indicate productions to be taken based on a current production. Terminals are denoted\r\nthrough a set of regular expressions used to match each type of terminal.\r\n\r\nThe [meta.rb][file:lib/rdf/n3/reader/meta.rb] file is generated from lib/rdf/n3/reader/n3-selectors.n3\r\n(taken from http://www.w3.org/2000/10/swap/grammar/n3-selectors.n3) which is the result of parsing\r\nhttp://www.w3.org/2000/10/swap/grammar/n3.n3 (along with bnf-rules.n3) using cwm using the following command sequence:\r\n\r\n    cwm n3.n3 bnf-rules.n3 --think --purge --data > n3-selectors.n3\r\n\r\n[n3-selectors.n3][file:lib/rdf/n3/reader/n3-selectors.rb] is itself used to generate meta.rb using script/build_meta.\r\n\r\n## TODO\r\n* Generate Formulae and solutions using BGP and SPARQL CONSTRUCT mechanisms\r\n* Create equivalent to `--think` to iterate on solutions.\r\n\r\n## Dependencies\r\n* [RDF.rb](http://rubygems.org/gems/rdf) (>= 1.1)\r\n\r\n## Documentation\r\nFull documentation available on [RubyDoc.info](http://rubydoc.info/github/ruby-rdf/rdf-n3/frames)\r\n\r\n### Principle Classes\r\n* {RDF::N3}\r\n* {RDF::N3::Format}\r\n* {RDF::N3::Reader}\r\n* {RDF::N3::Writer}\r\n\r\n### Additional vocabularies\r\n* {RDF::LOG}\r\n* {RDF::REI}\r\n\r\n### Patches\r\n* {Array}\r\n* {RDF::List}\r\n\r\n## Resources\r\n* [RDF.rb][RDF.rb]\r\n* [Distiller](http://rdf.greggkellogg.net/distiller)\r\n* [Documentation](http://rubydoc.info/github/ruby-rdf/rdf-n3/master/frames)\r\n* [History](file:file.History.html)\r\n* [Notation-3][N3]\r\n* [N3 Primer](http://www.w3.org/2000/10/swap/Primer.html)\r\n* [N3 Reification](http://www.w3.org/DesignIssues/Reify.html)\r\n* [Turtle][Turtle]\r\n* [W3C SWAP Test suite](http://www.w3.org/2000/10/swap/test/README.html)\r\n* [W3C Turtle Test suite](http://www.w3.org/2001/sw/DataAccess/df1/tests/README.txt)\r\n* [N-Triples][N-Triples]\r\n\r\n## Author\r\n* [Gregg Kellogg](http://github.com/gkellogg) - <http://greggkellogg.net/>\r\n\r\n## Contributors\r\n* [Nicholas Humfrey](http://github.com/njh) - <http://njh.me/>\r\n\r\n## Contributing\r\nThis repository uses [Git Flow](https://github.com/nvie/gitflow) to mange development and release activity. All submissions _must_ be on a feature branch based on the _develop_ branch to ease staging and integration.\r\n\r\n* Do your best to adhere to the existing coding conventions and idioms.\r\n* Don't use hard tabs, and don't leave trailing whitespace on any line.\r\n* Do document every method you add using [YARD][] annotations. Read the\r\n  [tutorial][YARD-GS] or just look at the existing code for examples.\r\n* Don't touch the `.gemspec`, `VERSION` or `AUTHORS` files. If you need to\r\n  change them, do so on your private branch only.\r\n* Do feel free to add yourself to the `CREDITS` file and the corresponding\r\n  list in the the `README`. Alphabetical order applies.\r\n* Do note that in order for us to merge any non-trivial changes (as a rule\r\n  of thumb, additions larger than about 15 lines of code), we need an\r\n  explicit [public domain dedication][PDD] on record from you.\r\n\r\n## License\r\n\r\nThis is free and unencumbered public domain software. For more information,\r\nsee <http://unlicense.org/> or the accompanying {file:UNLICENSE} file.\r\n\r\n## Feedback\r\n* <gregg@greggkellogg.net>\r\n* <http://rubygems.org/gem/rdf-n3>\r\n* <http://github.com/ruby-rdf/rdf-n3>\r\n* <http://lists.w3.org/Archives/Public/public-rdf-ruby/>\r\n\r\n[RDF.rb]:       http://ruby-rdf.github.com/rdf\r\n[RDF::Turtle]:  http://ruby-rdf.github.com/rdf-turtle/\r\n[N3]:           http://www.w3.org/DesignIssues/Notation3.html \"Notation-3\"\r\n[Turtle]:       http://www.w3.org/TR/turtle/\r\n[N-Triples]:    http://www.w3.org/TR/n-triples/\r\n[YARD]:         http://yardoc.org/\r\n[YARD-GS]:      http://rubydoc.info/docs/yard/file/docs/GettingStarted.md\r\n[PDD]:          http://lists.w3.org/Archives/Public/public-rdf-ruby/2010May/0013.html\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}